X<-3
X<-5
numlist <- c(0,1,2,3,4,5,6,7,8,9)
hello_world<- function (name,excalim=TRUE){if (exclaim==TRUE)}
hello_world<- function(name,excalim=TRUE){if (exclaim==TRUE){return(paste("hello",name,"!"))}else {return(paste("hello",name))}
hello_world
hello_world(sangee,!)
hello_world("sangee","!")
hello_world(sangee,!)
?hello_world
??hello_world
hello_world<- function(name,excalim=TRUE){if (exclaim==TRUE){return(paste("hello",name,"!"))}else {return(paste("hello",name))}
?read.csv()
?read.csv()
clearPushBack()
?read.csv()
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
read.csv()
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
library(jsonlite)
View(demo_table)
library(jsonlite)
?fromJSON()
demo_table2 <- fromJSON(txt='demo_car.json')
View(demo_table2)
x <- c(3, 3, 2, 2, 5, 5, 8, 8, 9)
x[3]
x <- c(3, 3, 2, 2, 5, 5, 8, 8, 9)
demo_table[3,"year]
demo_table[3,"Year]
demo_table[3,"Year"]
demo_table[3,"Year"]
demo_table[3.3]
demo_table[3,"Year"]
demo_table[3.3]
demo_table[3,3]
demo_table[3,"Year"]
demo_table[3.3]
demo_table[3,3]
demo_table[2,1]
demo_table[3,"Year"]
demo_table[3.3]
demo_table[3,3]
demo_table[2,1]
demo_table$"Vehicle_Class"
demo_table[3,"Year"]
demo_table[3.3]
demo_table[3,3]
demo_table[2,1]
demo_table$"Vehicle_Class"
demo_table$"Name"
demo_table[3,"Year"]
demo_table[3.3]
demo_table[3,3]
demo_table[2,1]
demo_table$"Vehicle_Class"
demo_table$"Name"
filter_table <- demo_table2[demo_table2$price > 10000,]
View(filter_table)
> ?subset()
?subset()
demo_table[3,"Year"]
demo_table[3.3]
demo_table[3,3]
demo_table[2,1]
demo_table$"Vehicle_Class"
demo_table$"Name"
filter_table <- demo_table2[demo_table2$price > 10000can]
filter_table2 <- subset(demo_table2, price > 10000 & drive == "4wd" & "clean" %in% title_status)
View(filter_table2)
filter_table3 <- subset(demo_table2, year > 2012 & %in% title_status "clean" )
filter_table3 <- subset(demo_table2, year > 2012 & %in% title_status "clean" )
filter_table3 <- subset(demo_table2, year > 2012 & "clean" %in% title_status  )
View(filter_table3)
?sample()
filter_table3 <- subset(demo_table2, year > 2012 & %in% title_status "clean" )
filter_table3 <- subset(demo_table2, year > 2012 & "clean" %in% title_status)
sample(c("cow", "deer", "pig", "chicken", "duck", "sheep", "dog"), 4)
sample(c("cow", "deer", "pig", "chicken", "duck", "sheep", "dog"), 4)
sample(c("cow", "deer", "pig", "chicken", "duck", "sheep", "dog"), 4)
sample(numlist)
sample(numlist,3)
sample(numlist,3)
sample(numlist,3)
filter_table3 <- subset(demo_table2, year > 2012 & %in% title_status "clean" )
filter_table3 <- subset(demo_table2, year > 2012 & "clean" %in% title_status)
sample(c("cow", "deer", "pig", "chicken", "duck", "sheep", "dog"), 4)
sample(numlist,3)
num_rows <- 1:nrow(demo_table)
filter_table3 <- subset(demo_table2, year > 2012 & %in% title_status "clean" )
filter_table3 <- subset(demo_table2, year > 2012 & "clean" %in% title_status)
sample(c("cow", "deer", "pig", "chicken", "duck", "sheep", "dog"), 4)
sample(numlist,3)
num_rows <- 1:nrow(demo_table)
sample_rows <- sample(num_rows, 3)
filter_table3 <- subset(demo_table2, year > 2012 & %in% title_status "clean" )
filter_table3 <- subset(demo_table2, year > 2012 & "clean" %in% title_status)
sample(c("cow", "deer", "pig", "chicken", "duck", "sheep", "dog"), 4)
sample(numlist,3)
num_rows <- 1:nrow(demo_table)
sample_rows <- sample(num_rows, 3)
demo_table[sample_rows,]
filter_table3 <- subset(demo_table2, year > 2012 & %in% title_status "clean" )
filter_table3 <- subset(demo_table2, year > 2012 & "clean" %in% title_status)
sample(c("cow", "deer", "pig", "chicken", "duck", "sheep", "dog"), 4)
sample(numlist,3)
num_rows <- 1:nrow(demo_table)
sample_rows <- sample(num_rows, 3)
demo_table[sample_rows,]
demo_table[sample(1:nrow(demo_table), 2),]
library(tidyverse)
?mutate()
View(demo_table)
filter_table3 <- subset(demo_table2, year > 2012 & %in% title_status "clean" )
filter_table3 <- subset(demo_table2, year > 2012 & "clean" %in% title_status)
sample(c("cow", "deer", "pig", "chicken", "duck", "sheep", "dog"), 4)
sample(numlist,3)
num_rows <- 1:nrow(demo_table)
sample_rows <- sample(num_rows, 3)
demo_table[sample_rows,]
demo_table[sample(1:nrow(demo_table), 2),]
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year),IsActive=TRUE)
filter_table3 <- subset(demo_table2, year > 2012 & %in% title_status "clean" )
filter_table3 <- subset(demo_table2, year > 2012 & "clean" %in% title_status)
sample(c("cow", "deer", "pig", "chicken", "duck", "sheep", "dog"), 4)
sample(numlist,3)
num_rows <- 1:nrow(demo_table)
sample_rows <- sample(num_rows, 3)
demo_table[sample_rows,]
demo_table[sample(1:nrow(demo_table), 2),]
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2021-Year),IsActive=TRUE)
demo_table <- demo_table %>% mutate(year_old=2021-year),)
demo_table <- demo_table %>% mutate(year_old=2021-year)
demo_table <- demo_table %>% mutate(Years_old=2021-Year)
View(demo_table2)
demo_table <- demo_table %>% mutate(Years_old=2021-Year)
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer), .groups = 'keep')
View(summarize_demo)
View(summarize_demo)
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer), .groups = 'keep')
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer),Maximum_Price=max(price),Num_Vehicles=n(), .groups = 'keep')
?gather()
demo_table3 <- read.csv('demo2.csv',check.names = F,stringsAsFactors = F)
View(demo_table3)
Vehicle_data <- read.csv('Vehicle_Data.xlsx',check.names = F,stringsAsFactors = F)
View(Vehicle_data)
View(Vehicle_data)
View(Vehicle_data)
View(Vehicle_data)
View(demo_table3)
new.function <- function(a) {
for(i in 1:a) {
b <- i^2
print(b)
}
}
new.function
new.function(2)
View(Vehicle_data)
Vehicle_data <- read_excel('Vehicle_Data.xlsx',check.names = F,stringsAsFactors = F)
library(readxl)
Vehicle_data <- read_excel('Vehicle_Data.xlsx',check.names = F,stringsAsFactors = F)
Vehicle_data <- read_excel('Vehicle_Data.xlsx')
View(Vehicle_data)
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer),Maximum_Price=max(price),Num_Vehicles=n(), .groups = 'drop_last')
View(summarize_demo)
View(demo_table3)
long_table <- gather(demo_table3,key="Metric",value="Score",buying_price:popularity)
View(long_table)
?gather()
long_table <- gather(demo_table3,key="buying_price",value="popularity",buying_price:popularity)
View(long_table)
View(demo_table3)
long_table <- demo_table3 %>% gather(key="Metric",value="Score",buying_price:popularity)
View(long_table)
View(Vehicle_data)
View(Vehicle_data)
?spread()
wide_table <- long_table %>% spread(key="Metric",value="Score")
View(wide_table)
wide_table <- long_table %>% spread(key="Metric",value="Score")
all.equal()
all.equal(demo_table3,wide_table)
table <-demo_table3[,order(colnames(wide_table))]
View(table)
View(table)
View(wide_table)
install.packages("pacman")
library(pacman)
pacman::p_load(pacman,dplyr,GGally,ggplot2,ggthemes,ggvis,httr,lubridate,plotly,rio,rmarkdown,shiny,stringr,tidyr)
p_unload(all)
library(datasets)
?ggplot()
?ggplot2()
library(datasets)
library(ggplot2)
library(datasets)
library(ggplot2)
?ggplot2()
?ggplot()
?aes()
head(mpg)
#data set
head(mtcars)
#check datatype
str(mtcars)
ggplot(mtcars,aes(x=wt)) + geom_density()
library(tidyverse)
ggplot(mtcars,aes(x=wt)) + geom_density()
# quantitative test check data's normal distribution
?shapiro.test()
#Shapiro-Wilk Normality Test
shapiro.test(mtcars$wt)
# Density plot
ggdensity(mtcars$wt, fill = "lightgray")
library(ggdensity)
library(tidyverse)
library(ggpubr)
library(rstatix)
ggdensity(mtcars$wt, fill = "lightgray")
# QQ plot
ggqqplot(mtcars$wt)
library("ggpubr")
library("rstatix")
library(ggpubr)
library(rstatix)
library(tidyverse)
ggdensity(mtcars$wt, fill = "lightgray")
library(ggpubr)
# Density plot
?ggpubr
# Density plot
?ggdensity
Data_set <- c(1,2,3,4,5,6,7,8,9,10)
sample(Data_set)
?sample_n()
?sample()
?sample_n()
library(dplyr)
library(dbplyr)
library(dtplyr)
?sample_n()
library(dplyr)
library(tidyverse)
library(ggplot2)
?read.csv
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F) #import used car dataset
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F) #import used car dataset
plt <- ggplot(population_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
sample_table <- population_table %>% sample_n(50) #randomly sample 50 data points
plt <- ggplot(sample_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
?t.test()
t.test(log10(sample_table$Miles_Driven),mu=mean(log10(population_table$Miles_Driven)))
sample_table1 <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
t.test(log10(sample_table1$Miles_Driven),log10(sample_table2$Miles_Driven)) #compare means of two samples
set.seed(42)
population1 = rnorm(1000)
population2 = sample(population1, 200)
t.test(population2, mu=mean(population1))
population3 = rnorm(1000, -2)
t.test(population2, mu=mean(population3))
sardines <- read.csv(file="../Resources/sardines.csv")
setwd("~/R_Analysis/01_Demo/03-Stu_Sardines/Unsolved")
sardines <- read.csv(file="~R_Analysis/01_Demo/03-Stu_Sardines/Unsolved")
setwd("~/R_Analysis/01_Demo/03-Stu_Sardines")
sardines <- read.csv(file="../Resources/sardines.csv")
sardines <- read.csv(file="/Resources/sardines.csv")
sardines <- read.csv(file="03-Stu_Sardines/Resources/sardines.csv")
sardines <- read.csv("03-Stu_Sardines/Resources/sardines.csv")
sardines <- read.csv("file=sardines.csv")
setwd("~/R_Analysis/01_Demo/03-Stu_Sardines/Resources")
sardines <- read.csv("file=Resourses/sardines.csv")
setwd("~/R_Analysis/01_Demo/03-Stu_Sardines/Unsolved")
sardines <- read.csv("file=Resourses/sardines.csv")
setwd("~/R_Analysis/01_Demo/03-Stu_Sardines")
sardines <- read.csv("file=Resourses/sardines.csv")
sardines <- read.csv("file=sardines.csv")
sardines <- read.csv("file=..Resources/sardines.csv")
setwd("~/R_Analysis/01_Demo/03-Stu_Sardines/Resources")
sardines <- read.csv("file=..Resources/sardines.csv")
sardines <- read.csv(file="../Resources/sardines.csv")
View(sardines)
Population_mu_Alaska = subset(sardines, location==1)
Population_mu_sandiego = subset(sardines, location==6)
Alaska = subs
mean(Population_mu_Alaska[['vertebrae']])
mean(Population_mu_sandiego[['vertebrae']])
Sample1=mean(Population_mu_Alaska[['vertebrae']])
Sample2=mean(Population_mu_sandiego[['vertebrae']])
t.test(Sample1,Sample2)
t.test(Population_mu_Alaska[['vertebrae'],Population_mu_sandiego[['vertebrae']])
t.test(Population_mu_Alaska[['vertebrae']],Population_mu_sandiego[['vertebrae']])
setwd("~/R_Analysis/01_Demo")
library(dplyr)
library(tidyverse)
library(ggplot2)
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F) #import used car dataset
plt <- ggplot(population_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
sample_table <- population_table %>% sample_n(50) #randomly sample 50 data points
plt <- ggplot(sample_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
t.test(log10(sample_table$Miles_Driven),mu=mean(log10(population_table$Miles_Driven)))
sample_table1 <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
t.test(log10(sample_table1$Miles_Driven),log10(sample_table2$Miles_Driven)) #compare means of two samples
e
head(mtcars)
mtcars_filt <- mtcars[,c("hp","cyl")]
mtcars_filt$cyl <- factor(mtcars_filt$cyl)
View(mtcars_filt)
aov(hp ~ cyl,data=mtcars_filt)
summary(aov(hp ~ cyl,data=mtcars_filt))
?cor()
head(mtcars)
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() #create scatter plot
cor(mtcars$hp,mtcars$qsec) #calculate correlation coefficient
head(used_cars)
used_cars= read.csv('used_car_data.csv',stringAsFactors=F)
used_cars = read.csv('used_car_data.csv',stringAsFactors = FALSE)
used_cars = read.csv(file='used_car_data.csv',stringAsFactors = FALSE)
used_cars = read.csv(file='used_car_data.csv')
View(used_cars)
head(used_cars)
plt <- ggplot(used_cars,aes(x=Miles_Driven,y=Selling_Price)) #import dataset into ggplot2
plt + geom_point() #create a scatter plot
cor(used_cars$Miles_Driven,used_cars$Selling_Price) #calculate correlation coefficient
used_matrix <- as.matrix(used_cars[,c("Selling_Price","Present_Price","Miles_Driven")]) #convert data frame into numeric matrix
View(used_matrix)
cor(used_matrix)
?lm()
lm(qsec ~ hp,mtcars) #create linear model
summary(lm(qsec~hp,mtcars)) #summarize linear model
summary(lm(qsec~hp,mtcars)) #summarize linear model
model <- lm(qsec ~ hp,mtcars) #create linear model
yvals <- model$coefficients['hp']*mtcars$hp +
model$coefficients['(Intercept)'] #determine
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red")
lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars) #generate multiple linear regression model
summary(lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars)) #generate summary statistics
table(mpg$class,mpg$year) #generate contingency table
tbl <- table(mpg$class,mpg$year) #generate contingency table
chisq.test(tbl) #compare categorical distributions
setwd("~/GitHub_local/MechaCar_Statistical_Analysis")
setwd("~/R_Analysis/01_Demo")
setwd("/Users/Sangeetha/Documents/GitHub_local\/MechaCar_Statistical_Analysis")
setwd("/Users/Sangeetha/Documents/GitHub_local/MechaCar_Statistical_Analysis")
library(dplyr)
?read.csv
#import csv file
mecha_mpg = read.csv(file='data/MechaCar_mpg.csv')
View(mecha_mpg)
#check class
class(mecha_mpg)
library(tidyverse)
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mecha_mpg)
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mecha_mpg)) #summarize linear model
plt <- ggplot(mecha_mpg,aes(x=mpg,y=vehicle_weight)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=ground_clearance), color = "red")
plt <- ggplot(mecha_mpg,aes(x=mpg,y=vehicle_weight)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=vehicle_length), color = "red") #plot scatter and linear model
plt <- ggplot(mecha_mpg,aes(x=mpg,y=vehicle_weight)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=ground_clearance), color = "red")
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mecha_mpg) #create linear model
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mecha_mpg)) #summarize linear model
?lm()
#plot mpg (dependent variable ) against some other variables to see association between variables
plot(vehicle_weight,mpg,main="scatterplot")
plot(mecha_mpg$vehicle_weight,mecha_mpg$mpg,main="scatterplot")
MPG=mecha_mpg$mpg
Vehicle_Weight=mecha_mpg$vehicle_weight
plot(Vehicle_Weight,MPG,main="scatterplot")
plt <- ggplot(mecha_mpg,aes(x=MPG,y=Vehicle_Weight))
plt + geom_point()
plt <- ggplot(mecha_mpg,aes(x=MPG,y=Vehicle_Weight))
plt + geom_point()+geom_line(aes(y=Vehicle_Weight), color = "red")
plt <- ggplot(mecha_mpg,aes(x=MPG,y=Vehicle_Weight))
plt + geom_point()
plt <- ggplot(mecha_mpg,aes(x=MPG,y=Vehicle_Weight))
plt + geom_point()+abline()
plt <- ggplot(mecha_mpg,aes(x=MPG,y=Vehicle_Weight))
plt + geom_point()+abline(lm(mpg ~ vehicle_weight,data=mecha_mpg)
plt <- ggplot(mecha_mpg,aes(x=MPG,y=Vehicle_Weight))
plt + geom_point()+ abline(lm(mpg ~ vehicle_weight,data=mecha_mpg))
abline(lm(mpg ~ vehicle_weight,data=mecha_mpg))
line=abline(lm(mpg ~ vehicle_weight,data=mecha_mpg))
plt <- ggplot(mecha_mpg,aes(x=MPG,y=Vehicle_Weight))
plt + geom_point() +line
plt <- ggplot(mecha_mpg,aes(x=MPG,y=Vehicle_Weight))
plt + geom_point() +geom_smooth(method=lm)
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mecha_mpg) #create linear model
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mecha_mpg)) #summarize linear model
plt <- ggplot(mecha_mpg,aes(x=Vehicle_Weight,y=MPG))
plt + geom_point() + geom_smooth(method=lm)
summary(MPG - mecha_mpg$fitted.values)
lm_model=lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mecha_mpg) #create linear model
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mecha_mpg)) #summarize linear model
summary(MPG - lm_model$fitted.values)
head(mecha_mpg)
ggplot(mecha_mpg,aes(x=vehicle_weight)) + geom_density()
ggplot(mecha_mpg,aes(x=mpg)) + geom_density()
ggplot(mecha_mpg,aes(x=Vehicle_Weight)) + geom_density()
shapiro.test(Vehicle_Weight)
shapiro.test(mecha_mpg)
shapiro.test(mecha_mpg$mpg)
plt <- ggplot(mecha_mpg,aes(x=Vehicle_Weight,y=MPG))
plt + geom_point() + geom_smooth(method=lm)
#test pvalue
pf(22.07,5,44, lower.tail=False)
#test pvalue
pf(22.07,5,44, lower.tail=FALSE)
lm_model2 =lm(mpg ~ vehicle_length + ground_clearance, data=mecha_mpg)
summary(lm(mpg ~ vehicle_length + ground_clearance, data=mecha_mpg))
library(dplyr)
library(tidyverse)
head(mecha_mpg)
lm_model1=lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mecha_mpg) #create linear model
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mecha_mpg)) #summarize linear model
MPG=mecha_mpg$mpg
Vehicle_Weight=mecha_mpg$vehicle_weight
plt <- ggplot(mecha_mpg,aes(x=Vehicle_Weight,y=MPG))
plt + geom_point() + geom_smooth(method=lm)
?cor()
cor(vehicle_weight,mpg)
library(dplyr)
library(tidyverse)
mecha_mpg = read.csv(file='data/MechaCar_mpg.csv')
head(mecha_mpg)
lm_model1=lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mecha_mpg) #create linear model
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mecha_mpg)) #summarize linear model
MPG=mecha_mpg$mpg
Vehicle_Weight=mecha_mpg$vehicle_weight
plt <- ggplot(mecha_mpg,aes(x=Vehicle_Weight,y=MPG))
plt + geom_point() + geom_smooth(method=lm)
ggplot(mecha_mpg,aes(x=Vehicle_Weight)) + geom_density()
shapiro.test(mecha_mpg$mpg)
lm_model2 =lm(mpg ~ vehicle_length + ground_clearance, data=mecha_mpg)
summary(lm(mpg ~ vehicle_length + ground_clearance, data=mecha_mpg))
cor(vehicle_weight,mpg)
#correlation
cor(vehicle_weight,mpg)
cor(mecha_mpg$vehicle_weight,mecha_mpg$mpg)
cor(mecha_mpg$spoiler_angle,mecha_mpg$mpg)
cor(mecha_mpg$vehicle_length,mecha_mpg$mpg)
cor(mecha_mpg$ground_clearance,mecha_mpg$mpg)
